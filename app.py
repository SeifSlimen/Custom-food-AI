import streamlit as st
from ollama import Client
import json
import re

# Set up the Ollama client (running locally)
client = Client(host='http://localhost:11434')

# Load recipes from local dataset
with open('2/full_format_recipes.json', 'r', encoding='utf-8') as f:
    local_recipes = json.load(f)

def search_local_recipes(query, recipes, max_results=3):
    """Search for recipes by name or keyword in the local dataset."""
    query = query.lower()
    results = []
    for recipe in recipes:
        title = recipe.get('title', '').lower()
        if query in title or any(q in title for q in re.findall(r'\w+', query)):
            results.append(recipe)
        if len(results) >= max_results:
            break
    return results

# Streamlit UI
st.markdown("""
    <h1 style='text-align: center; color: #d2691e;'>🍲 Foodie AI: Your Recipe & Cooking Assistant 🍲</h1>
    <p style='text-align: center; color: #6b4f1d;'>Ask for recipes, cooking tips, or food facts!</p>
    <hr style='border-top: 2px solid #d2691e;'>
""", unsafe_allow_html=True)

user_input = st.text_input("What food or recipe question do you have?")

if user_input:
    with st.spinner("Cooking up an answer..."):
        # First, try to find a local recipe
        matches = search_local_recipes(user_input, local_recipes)
        if matches:
            st.info("🗂️ **This recipe was found in your local dataset.**")
            for recipe in matches:
                st.markdown(f"### {recipe.get('title','(No Title)')}")
                st.markdown(f"**Ingredients:**\n- " + '\n- '.join(recipe.get('ingredients', [])))
                st.markdown(f"**Directions:**\n" + '\n'.join(recipe.get('directions', [])))
                st.markdown(f"**Categories:** {', '.join(recipe.get('categories', []))}")
                st.markdown("---")
        else:
            st.info("🤖 **This answer was generated by AI.**")
            response = client.chat(model="deepseek-r1:7b", messages=[{"role": "user", "content": user_input}])
            answer = response['message']['content']
            st.success(answer)
            st.balloons()
